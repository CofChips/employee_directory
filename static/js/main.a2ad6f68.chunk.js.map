{"version":3,"sources":["components/Navbar/index.js","components/TableHead/index.js","components/TableList/index.js","components/Search/index.js","pages/Directory.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","TableHead","props","scope","id","onClick","onClickNameA","onClickNameD","onClickPhoneA","onClickPhoneD","onClickEmailA","onClickEmailD","score","onClickdobA","onClickdobD","TableList","alt","name","src","image","phone","email","dob","Search","type","placeholder","onChange","swap","items","firstIndex","secondIndex","temp","selectionSort","input","min","newArray","len","length","i","j","selectionSortD","Directory","state","Employees","search","ListEmployee","handleInputChange","event","value","target","console","log","setState","handleEmployeeSearch","includes","employeeState","lowerValue","toLowerCase","push","handleAscend","handleDescend","employees","this","map","employee","key","toString","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a2ad6f68.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light background text-center\">\r\n      <div className=\"m-auto\">\r\n        <h1 className=\"font\">Employee Directory</h1>\r\n        <p>Click on the carets in the column header to filter by category or type in the search box to narrow results</p>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction TableHead(props) {\r\n  return (\r\n    <thead>\r\n    <tr className=\"text-center\">\r\n      <th scope=\"col\">Image</th>\r\n      <th id=\"name\" scope=\"col\">Name &nbsp; <span id=\"name\" onClick={props.onClickNameA}><i className=\"fa fa-caret-up\"></i></span> &nbsp; <span onClick={props.onClickNameD}><i className=\"fa fa-caret-down\"></i></span></th>\r\n      <th scope=\"col\">Phone &nbsp; <span onClick={props.onClickPhoneA}><i className=\"fa fa-caret-up\"></i></span> &nbsp; <span onClick={props.onClickPhoneD}><i className=\"fa fa-caret-down\"></i></span></th>\r\n      <th scope=\"col\">Email &nbsp; <span onClick={props.onClickEmailA}><i className=\"fa fa-caret-up\"></i></span> &nbsp; <span onClick={props.onClickEmailD}><i className=\"fa fa-caret-down\"></i></span></th>\r\n      <th score=\"col\">DOB &nbsp; <span id=\"dob\" onClick={props.onClickdobA}><i className=\"fa fa-caret-up\"></i></span> &nbsp; <span onClick={props.onClickdobD}><i className=\"fa fa-caret-down\"></i></span></th>\r\n    </tr>\r\n  </thead>\r\n  );\r\n}\r\n\r\nexport default TableHead;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction TableList(props) {\r\n  return (\r\n\r\n    <tr>\r\n      <td><img className=\"image\" alt={props.name} src={props.image}/></td>\r\n      <td>{props.name}</td>\r\n      <td>{props.phone}</td>\r\n      <td>{props.email}</td>\r\n      <td>{props.dob}</td>\r\n    </tr>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default TableList;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Search(props){\r\n\r\n    return(\r\n        <div className=\"search m-auto pt-5\">\r\n        <input type=\"search\" className=\"form-control\" id=\"search\" placeholder=\"Search\" onChange={props.onChange}/>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Search;\r\n\r\n","import React, { useEffect, useState, Component } from \"react\";\r\nimport TableHead from \"../components/TableHead/index\";\r\nimport \"./Directory.css\"\r\nimport Employees from \"../Employees.json\";\r\nimport TableList from \"../components/TableList/index\";\r\nimport Search from \"../components/Search/index\"\r\n\r\nfunction swap(items, firstIndex, secondIndex) {\r\n    var temp = items[firstIndex];\r\n    items[firstIndex] = items[secondIndex];\r\n    items[secondIndex] = temp;\r\n}\r\n\r\nfunction selectionSort(items, input) {\r\n    var newArray = items\r\n    var len = newArray.length;\r\n    var min;\r\n\r\n    for (var i = 0; i < len; i++) {\r\n\r\n\r\n        min = i;\r\n\r\n\r\n        for (var j = i + 1; j < len; j++) {\r\n            if (newArray[j][input] < newArray[min][input]) {\r\n                min = j;\r\n            }\r\n        }\r\n\r\n        if (i !== min) {\r\n            swap(items, i, min);\r\n        }\r\n    }\r\n\r\n    return newArray;\r\n}\r\n\r\nfunction selectionSortD(items, input) {\r\n    var newArray = items\r\n    var len = newArray.length;\r\n    var min;\r\n\r\n    for (var i = 0; i < len; i++) {\r\n\r\n\r\n        min = i;\r\n\r\n\r\n        for (var j = i + 1; j < len; j++) {\r\n            if (newArray[j][input] > newArray[min][input]) {\r\n                min = j;\r\n            }\r\n        }\r\n\r\n        if (i !== min) {\r\n            swap(items, i, min);\r\n        }\r\n    }\r\n\r\n    return newArray;\r\n}\r\n\r\nclass Directory extends Component {\r\n\r\n    state = {\r\n      Employees,\r\n      search: \"\",\r\n      ListEmployee: Employees\r\n    };\r\n\r\n    handleInputChange = event => {\r\n\r\n        let value = event.target.value;\r\n        console.log(value)\r\n\r\n        this.setState({\r\n          search: value\r\n        });\r\n        console.log(\"value:\",value)\r\n        this.handleEmployeeSearch(value);\r\n      };\r\n\r\n      handleEmployeeSearch = (value) => {\r\n          console.log(\"this is the search\")\r\n          console.log(\"value pass: \",value)\r\n          console.log(this.state.Employees)\r\n          console.log(this.state.Employees[0].name)\r\n\r\n          if(this.state.Employees[0].name.includes(value)){\r\n              console.log(\"This works\")\r\n          }\r\n          let newArray = []\r\n          let employeeState = this.state.Employees\r\n          let lowerValue = value.toLowerCase();\r\n          if(value){\r\n            for (let i = 0; i<employeeState.length; i++){\r\n                if(employeeState[i].name.toLowerCase().includes(lowerValue) || employeeState[i].email.toLowerCase().includes(lowerValue) || employeeState[i].dob.includes(value) || employeeState[i].phone.includes(value) ){\r\n                    newArray.push(employeeState[i])\r\n                }\r\n            }\r\n            this.setState({ ListEmployee: newArray})\r\n          }\r\n          else{\r\n            this.setState({ ListEmployee: employeeState})\r\n          }\r\n\r\n      }\r\n\r\n      handleAscend = (id) => { \r\n          console.log(\"this is the ascend id: \",id)\r\n          this.setState({ ListEmployee: selectionSort(this.state.Employees,id)})\r\n      }\r\n\r\n      handleDescend = (id) => { \r\n        console.log(\"this is the ascend id: \",id)\r\n        this.setState({ ListEmployee: selectionSortD(this.state.Employees,id)})\r\n    }\r\n\r\n\r\n    // const [employeeList, setEmployeeList] = useState(Employees);\r\n\r\n    // const [search, setSearch] = useState();\r\n\r\n\r\n\r\n    // for sorting - start -\r\n\r\n    //   -end-\r\n\r\n\r\n    render (){\r\n        const employees = this.state.ListEmployee.map((employee) =>\r\n        <TableList key={employee.id.toString()}\r\n            name={employee.name}\r\n            image={employee.image}\r\n            phone={employee.phone}\r\n            email={employee.email}\r\n            dob={employee.dob}\r\n        />\r\n\r\n    )\r\n        return (\r\n            <div>\r\n                <Search onChange = {this.handleInputChange}/>\r\n    <div className=\"container\">\r\n    <table className=\"table table-striped mt-5\">\r\n    \r\n    <TableHead onClickNameA={()=>this.handleAscend(\"name\")} onClickNameD={()=>this.handleDescend(\"name\")} onClickdobA={()=>this.handleAscend(\"year\")} onClickdobD={()=>this.handleDescend(\"year\")} onClickPhoneA={()=>this.handleAscend(\"phone\")} onClickPhoneD={()=>this.handleDescend(\"phone\")} onClickEmailA={()=>this.handleAscend(\"email\")} onClickEmailD={()=>this.handleDescend(\"email\")}/>\r\n    <tbody className=\"text-center\">\r\n        {employees}\r\n    </tbody>\r\n\r\n</table>\r\n    </div>\r\n\r\n            </div>\r\n    \r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Directory;\r\n\r\n// onChange={e => setPassword(e.target.value)}","import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport Navbar from \"./components/Navbar/index\";\nimport Directory from \"./pages/Directory\";\n\n\nfunction App() {\n  return (\n    <div>\n<Navbar/>\n{/* <Search/> */}\n<Directory/>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}